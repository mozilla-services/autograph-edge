# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  test:
    docker:
        - image: golang:1.12
    working_directory: /root/go/src/go.mozilla.org/autograph-edge
    environment:
        GOPATH: "/root/go"
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install Packages
          command: |
              echo 'deb http://ftp.debian.org/debian stretch-backports main' >> /etc/apt/sources.list
              apt update
              apt install -y libltdl-dev netcat clang
              apt-get -y -t stretch-backports install git

      - run:
          name: Install Autograph
          command: go get go.mozilla.org/autograph

      - run:
          name: Run Autograph
          command: |
              go get go.mozilla.org/autograph
              $GOPATH/bin/autograph -c $GOPATH/src/go.mozilla.org/autograph/autograph.yaml
          background: true

      - run:
          name: Run Autograph Edge
          command: |
              go get -u golang.org/x/vgo
              $GOPATH/bin/vgo install go.mozilla.org/autograph-edge
              $GOPATH/bin/autograph-edge -c autograph-edge.yaml
          background: true

      - run:
          name: Sign an APK
          command: |
              while ! nc -z localhost 8080; do
                echo -n "."
                sleep 1 # wait for a sec before checking again
              done
              curl -F "input=@test.apk" -o /tmp/signed.apk \
                -H "Authorization: dd095f88adbf7bdfa18b06e23e83896107d7e0f969f7415830028fa2c1ccf9fd" \
                http://localhost:8080/sign

      - save_cache:
          key: apk-v1-{{ .Branch }}-{{epoch}}
          paths:
            - /tmp/signed.apk

      - run:
          name: Sign XPIs
          command: |
              while ! nc -z localhost 8080; do
                echo -n "."
                sleep 1 # wait for a sec before checking again
              done
              curl -F "input=@test.xpi" -o /tmp/signed-default.xpi \
                -H "Authorization: c4180d2963fffdcd1cd5a1a343225288b964d8934b809a7d76941ccf67cc8547" \
                http://localhost:8080/sign
              curl -F "input=@test.xpi" -o /tmp/signed-PKCS7-SHA256-COSE-ES256.xpi \
                -H "Authorization: b8c8c00f310c9e160dda75790df6be106e29607fde3c1092287d026c014be880" \
                http://localhost:8080/sign

      - save_cache:
          key: xpi-v1-{{ .Branch }}-{{epoch}}
          paths:
            - /tmp/signed-default.xpi
            - /tmp/signed-PKCS7-SHA256-COSE-ES256.xpi

  verify:
    docker:
      - image: circleci/android:api-25-node8-alpha
    steps:
      - restore_cache:
          key: apk-v1-{{ .Branch }}
      - run:
          name: Verify APK signature
          command: |
              sudo apt update
              sudo apt install -y android-sdk-build-tools
              /opt/android/sdk/build-tools/27.0.3/apksigner verify --verbose /tmp/signed.apk

  build:
    docker:
      - image: docker:18.02.0-ce
    working_directory: /dockerflow
    steps:
      - run:
          name: Install git
          command: |
              apk update
              apk add git openssh

      - checkout
      - setup_remote_docker

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: docker build -t app:build .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: mkdir -p /cache; docker save -o /cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /cache/docker.tar
  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  test-verify-build-deploy:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/

      - verify:
          requires:
            - test
          filters:
            tags:
              only: /.*/

      - build:
          requires:
            - test
            - verify
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - test
            - verify
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
